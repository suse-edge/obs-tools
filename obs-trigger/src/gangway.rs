// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateJobExecutionRequest {
    #[prost(string, tag = "1")]
    pub job_name: ::prost::alloc::string::String,
    #[prost(enumeration = "JobExecutionType", tag = "2")]
    pub job_execution_type: i32,
    #[prost(message, optional, tag = "3")]
    pub refs: ::core::option::Option<Refs>,
    #[prost(message, optional, tag = "4")]
    pub pod_spec_options: ::core::option::Option<PodSpecOptions>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PodSpecOptions {
    #[prost(map = "string, string", tag = "1")]
    pub envs:
        ::std::collections::HashMap<::prost::alloc::string::String, ::prost::alloc::string::String>,
    #[prost(map = "string, string", tag = "2")]
    pub labels:
        ::std::collections::HashMap<::prost::alloc::string::String, ::prost::alloc::string::String>,
    #[prost(map = "string, string", tag = "3")]
    pub annotations:
        ::std::collections::HashMap<::prost::alloc::string::String, ::prost::alloc::string::String>,
}
/// Look up a single Prow Job execution.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetJobExecutionRequest {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
}
/// Look up all Prow Job executions that match all fields given here.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListJobExecutionsRequest {
    /// Mapped to URL query parameter `job_name`.
    #[prost(string, tag = "1")]
    pub job_name: ::prost::alloc::string::String,
    /// Mapped to URL query parameter `status`.
    #[prost(enumeration = "JobExecutionStatus", tag = "2")]
    pub status: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct JobExecutions {
    #[prost(message, repeated, tag = "1")]
    pub job_execution: ::prost::alloc::vec::Vec<JobExecution>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct JobExecution {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub job_name: ::prost::alloc::string::String,
    #[prost(enumeration = "JobExecutionType", tag = "3")]
    pub job_type: i32,
    #[prost(enumeration = "JobExecutionStatus", tag = "4")]
    pub job_status: i32,
    #[prost(message, optional, tag = "5")]
    pub refs: ::core::option::Option<Refs>,
    #[prost(message, optional, tag = "6")]
    pub pod_spec_options: ::core::option::Option<PodSpecOptions>,
    #[prost(string, tag = "7")]
    pub gcs_path: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "8")]
    pub create_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "9")]
    pub completion_time: ::core::option::Option<::prost_types::Timestamp>,
}
/// Refs is a direct, 1:1 translation of the existing "Refs" struct defined in
/// prow/apis/prowjobs/v1/types.go.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Refs {
    #[prost(string, tag = "1")]
    pub org: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub repo: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub repo_link: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub base_ref: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub base_sha: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub base_link: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "7")]
    pub pulls: ::prost::alloc::vec::Vec<Pull>,
    #[prost(string, tag = "8")]
    pub path_alias: ::prost::alloc::string::String,
    #[prost(bool, tag = "9")]
    pub work_dir: bool,
    #[prost(string, tag = "10")]
    pub clone_uri: ::prost::alloc::string::String,
    #[prost(bool, tag = "11")]
    pub skip_submodules: bool,
    #[prost(int32, tag = "12")]
    pub clone_depth: i32,
    #[prost(bool, tag = "13")]
    pub skip_fetch_head: bool,
}
/// Pull is a direct, 1:1 translation of the existing "Pull" struct defined in
/// prow/apis/prowjobs/v1/types.go.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pull {
    #[prost(int32, tag = "1")]
    pub number: i32,
    #[prost(string, tag = "2")]
    pub author: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub sha: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub title: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub r#ref: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub link: ::prost::alloc::string::String,
    #[prost(string, tag = "7")]
    pub commit_link: ::prost::alloc::string::String,
    #[prost(string, tag = "8")]
    pub author_link: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BulkJobStatusChangeRequest {
    #[prost(message, optional, tag = "1")]
    pub job_status_change: ::core::option::Option<JobStatusChange>,
    #[prost(string, tag = "2")]
    pub cluster: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub started_before: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "4")]
    pub started_after: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(enumeration = "JobExecutionType", tag = "5")]
    pub job_type: i32,
    #[prost(message, optional, tag = "6")]
    pub refs: ::core::option::Option<Refs>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct JobStatusChange {
    #[prost(enumeration = "JobExecutionStatus", tag = "1")]
    pub current: i32,
    #[prost(enumeration = "JobExecutionStatus", tag = "2")]
    pub desired: i32,
}
/// JobExecutionStatus is a 1:1 translation of the existing "ProwJobState" type
/// in prow/apis/prowjobs/v1/types.go.
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum JobExecutionStatus {
    Unspecified = 0,
    Triggered = 1,
    Pending = 2,
    Success = 3,
    Failure = 4,
    Aborted = 5,
    Error = 6,
}
impl JobExecutionStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            JobExecutionStatus::Unspecified => "JOB_EXECUTION_STATUS_UNSPECIFIED",
            JobExecutionStatus::Triggered => "TRIGGERED",
            JobExecutionStatus::Pending => "PENDING",
            JobExecutionStatus::Success => "SUCCESS",
            JobExecutionStatus::Failure => "FAILURE",
            JobExecutionStatus::Aborted => "ABORTED",
            JobExecutionStatus::Error => "ERROR",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "JOB_EXECUTION_STATUS_UNSPECIFIED" => Some(Self::Unspecified),
            "TRIGGERED" => Some(Self::Triggered),
            "PENDING" => Some(Self::Pending),
            "SUCCESS" => Some(Self::Success),
            "FAILURE" => Some(Self::Failure),
            "ABORTED" => Some(Self::Aborted),
            "ERROR" => Some(Self::Error),
            _ => None,
        }
    }
}
/// JobExecutionType is a 1:1 translation of the existing "ProwJobType" type
/// in prow/apis/prowjobs/v1/types.go.
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum JobExecutionType {
    Unspecified = 0,
    Periodic = 1,
    Postsubmit = 2,
    Presubmit = 3,
    Batch = 4,
}
impl JobExecutionType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            JobExecutionType::Unspecified => "JOB_EXECUTION_TYPE_UNSPECIFIED",
            JobExecutionType::Periodic => "PERIODIC",
            JobExecutionType::Postsubmit => "POSTSUBMIT",
            JobExecutionType::Presubmit => "PRESUBMIT",
            JobExecutionType::Batch => "BATCH",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "JOB_EXECUTION_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
            "PERIODIC" => Some(Self::Periodic),
            "POSTSUBMIT" => Some(Self::Postsubmit),
            "PRESUBMIT" => Some(Self::Presubmit),
            "BATCH" => Some(Self::Batch),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod prow_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::http::Uri;
    use tonic::codegen::*;
    #[derive(Debug, Clone)]
    pub struct ProwClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl ProwClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> ProwClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(inner: T, interceptor: F) -> ProwClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<http::Request<tonic::body::BoxBody>>>::Error:
                Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            ProwClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// FIXME: In the future we can just return a unique token (only), in the same
        /// way that GCB returns immediately with the globally-unique BuildId. That is,
        /// in the future the response will be a union of either the full JobExecution
        /// message or a single JobExecutionToken (string). See
        /// https://docs.google.com/document/d/1v77jp1Nb5C2C2-PdV02SGViO9CyZ9SvNxCPOHyIUQeo/edit#bookmark=id.q68srxklvpt4.
        pub async fn create_job_execution(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateJobExecutionRequest>,
        ) -> std::result::Result<tonic::Response<super::JobExecution>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/Prow/CreateJobExecution");
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("Prow", "CreateJobExecution"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_job_execution(
            &mut self,
            request: impl tonic::IntoRequest<super::GetJobExecutionRequest>,
        ) -> std::result::Result<tonic::Response<super::JobExecution>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/Prow/GetJobExecution");
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("Prow", "GetJobExecution"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn list_job_executions(
            &mut self,
            request: impl tonic::IntoRequest<super::ListJobExecutionsRequest>,
        ) -> std::result::Result<tonic::Response<super::JobExecutions>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/Prow/ListJobExecutions");
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("Prow", "ListJobExecutions"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn bulk_job_status_change(
            &mut self,
            request: impl tonic::IntoRequest<super::BulkJobStatusChangeRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/Prow/BulkJobStatusChange");
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("Prow", "BulkJobStatusChange"));
            self.inner.unary(req, path, codec).await
        }
    }
}
